// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bigdata/bigdataservicer.proto

package bigdata // import "github.com/linkai-io/am/protocservices/bigdata"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCTRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                  `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetCTRequest) Reset()         { *m = GetCTRequest{} }
func (m *GetCTRequest) String() string { return proto.CompactTextString(m) }
func (*GetCTRequest) ProtoMessage()    {}
func (*GetCTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{0}
}
func (m *GetCTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTRequest.Merge(dst, src)
}
func (m *GetCTRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTRequest proto.InternalMessageInfo

func (m *GetCTRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetCTRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

type GetCTResponse struct {
	Time                 int64                           `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Records              map[string]*prototypes.CTRecord `protobuf:"bytes,2,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GetCTResponse) Reset()         { *m = GetCTResponse{} }
func (m *GetCTResponse) String() string { return proto.CompactTextString(m) }
func (*GetCTResponse) ProtoMessage()    {}
func (*GetCTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{1}
}
func (m *GetCTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTResponse.Merge(dst, src)
}
func (m *GetCTResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTResponse proto.InternalMessageInfo

func (m *GetCTResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GetCTResponse) GetRecords() map[string]*prototypes.CTRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type AddCTRequest struct {
	UserContext          *prototypes.UserContext         `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                          `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	QueryTime            int64                           `protobuf:"varint,3,opt,name=QueryTime,proto3" json:"QueryTime,omitempty"`
	Records              map[string]*prototypes.CTRecord `protobuf:"bytes,4,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AddCTRequest) Reset()         { *m = AddCTRequest{} }
func (m *AddCTRequest) String() string { return proto.CompactTextString(m) }
func (*AddCTRequest) ProtoMessage()    {}
func (*AddCTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{2}
}
func (m *AddCTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCTRequest.Merge(dst, src)
}
func (m *AddCTRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddCTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCTRequest proto.InternalMessageInfo

func (m *AddCTRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddCTRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

func (m *AddCTRequest) GetQueryTime() int64 {
	if m != nil {
		return m.QueryTime
	}
	return 0
}

func (m *AddCTRequest) GetRecords() map[string]*prototypes.CTRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type CTAddedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CTAddedResponse) Reset()         { *m = CTAddedResponse{} }
func (m *CTAddedResponse) String() string { return proto.CompactTextString(m) }
func (*CTAddedResponse) ProtoMessage()    {}
func (*CTAddedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{3}
}
func (m *CTAddedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CTAddedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CTAddedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CTAddedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CTAddedResponse.Merge(dst, src)
}
func (m *CTAddedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CTAddedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CTAddedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CTAddedResponse proto.InternalMessageInfo

type DeleteCTRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                  `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DeleteCTRequest) Reset()         { *m = DeleteCTRequest{} }
func (m *DeleteCTRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCTRequest) ProtoMessage()    {}
func (*DeleteCTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{4}
}
func (m *DeleteCTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCTRequest.Merge(dst, src)
}
func (m *DeleteCTRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCTRequest proto.InternalMessageInfo

func (m *DeleteCTRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteCTRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

type CTDeletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CTDeletedResponse) Reset()         { *m = CTDeletedResponse{} }
func (m *CTDeletedResponse) String() string { return proto.CompactTextString(m) }
func (*CTDeletedResponse) ProtoMessage()    {}
func (*CTDeletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{5}
}
func (m *CTDeletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CTDeletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CTDeletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CTDeletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CTDeletedResponse.Merge(dst, src)
}
func (m *CTDeletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CTDeletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CTDeletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CTDeletedResponse proto.InternalMessageInfo

type GetCTSubdomainsRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                  `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetCTSubdomainsRequest) Reset()         { *m = GetCTSubdomainsRequest{} }
func (m *GetCTSubdomainsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCTSubdomainsRequest) ProtoMessage()    {}
func (*GetCTSubdomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{6}
}
func (m *GetCTSubdomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTSubdomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTSubdomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTSubdomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTSubdomainsRequest.Merge(dst, src)
}
func (m *GetCTSubdomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCTSubdomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTSubdomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTSubdomainsRequest proto.InternalMessageInfo

func (m *GetCTSubdomainsRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetCTSubdomainsRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

type GetCTSubdomainsResponse struct {
	Time                 int64                              `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Records              map[string]*prototypes.CTSubdomain `protobuf:"bytes,2,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *GetCTSubdomainsResponse) Reset()         { *m = GetCTSubdomainsResponse{} }
func (m *GetCTSubdomainsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCTSubdomainsResponse) ProtoMessage()    {}
func (*GetCTSubdomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{7}
}
func (m *GetCTSubdomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTSubdomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTSubdomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTSubdomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTSubdomainsResponse.Merge(dst, src)
}
func (m *GetCTSubdomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCTSubdomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTSubdomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTSubdomainsResponse proto.InternalMessageInfo

func (m *GetCTSubdomainsResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GetCTSubdomainsResponse) GetRecords() map[string]*prototypes.CTSubdomain {
	if m != nil {
		return m.Records
	}
	return nil
}

type AddCTSubdomainsRequest struct {
	UserContext          *prototypes.UserContext            `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                             `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	QueryTime            int64                              `protobuf:"varint,3,opt,name=QueryTime,proto3" json:"QueryTime,omitempty"`
	Records              map[string]*prototypes.CTSubdomain `protobuf:"bytes,4,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *AddCTSubdomainsRequest) Reset()         { *m = AddCTSubdomainsRequest{} }
func (m *AddCTSubdomainsRequest) String() string { return proto.CompactTextString(m) }
func (*AddCTSubdomainsRequest) ProtoMessage()    {}
func (*AddCTSubdomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{8}
}
func (m *AddCTSubdomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCTSubdomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCTSubdomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddCTSubdomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCTSubdomainsRequest.Merge(dst, src)
}
func (m *AddCTSubdomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddCTSubdomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCTSubdomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCTSubdomainsRequest proto.InternalMessageInfo

func (m *AddCTSubdomainsRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddCTSubdomainsRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

func (m *AddCTSubdomainsRequest) GetQueryTime() int64 {
	if m != nil {
		return m.QueryTime
	}
	return 0
}

func (m *AddCTSubdomainsRequest) GetRecords() map[string]*prototypes.CTSubdomain {
	if m != nil {
		return m.Records
	}
	return nil
}

type CTSubdomainsAddedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CTSubdomainsAddedResponse) Reset()         { *m = CTSubdomainsAddedResponse{} }
func (m *CTSubdomainsAddedResponse) String() string { return proto.CompactTextString(m) }
func (*CTSubdomainsAddedResponse) ProtoMessage()    {}
func (*CTSubdomainsAddedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{9}
}
func (m *CTSubdomainsAddedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CTSubdomainsAddedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CTSubdomainsAddedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CTSubdomainsAddedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CTSubdomainsAddedResponse.Merge(dst, src)
}
func (m *CTSubdomainsAddedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CTSubdomainsAddedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CTSubdomainsAddedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CTSubdomainsAddedResponse proto.InternalMessageInfo

type DeleteCTSubdomainsRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	ETLD                 string                  `protobuf:"bytes,2,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DeleteCTSubdomainsRequest) Reset()         { *m = DeleteCTSubdomainsRequest{} }
func (m *DeleteCTSubdomainsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCTSubdomainsRequest) ProtoMessage()    {}
func (*DeleteCTSubdomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{10}
}
func (m *DeleteCTSubdomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCTSubdomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCTSubdomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCTSubdomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCTSubdomainsRequest.Merge(dst, src)
}
func (m *DeleteCTSubdomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCTSubdomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCTSubdomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCTSubdomainsRequest proto.InternalMessageInfo

func (m *DeleteCTSubdomainsRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteCTSubdomainsRequest) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

type CTSubdomainsDeletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CTSubdomainsDeletedResponse) Reset()         { *m = CTSubdomainsDeletedResponse{} }
func (m *CTSubdomainsDeletedResponse) String() string { return proto.CompactTextString(m) }
func (*CTSubdomainsDeletedResponse) ProtoMessage()    {}
func (*CTSubdomainsDeletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bigdataservicer_ea8b46e5ebe47f57, []int{11}
}
func (m *CTSubdomainsDeletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CTSubdomainsDeletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CTSubdomainsDeletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CTSubdomainsDeletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CTSubdomainsDeletedResponse.Merge(dst, src)
}
func (m *CTSubdomainsDeletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CTSubdomainsDeletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CTSubdomainsDeletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CTSubdomainsDeletedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetCTRequest)(nil), "bigdata.GetCTRequest")
	proto.RegisterType((*GetCTResponse)(nil), "bigdata.GetCTResponse")
	proto.RegisterMapType((map[string]*prototypes.CTRecord)(nil), "bigdata.GetCTResponse.RecordsEntry")
	proto.RegisterType((*AddCTRequest)(nil), "bigdata.AddCTRequest")
	proto.RegisterMapType((map[string]*prototypes.CTRecord)(nil), "bigdata.AddCTRequest.RecordsEntry")
	proto.RegisterType((*CTAddedResponse)(nil), "bigdata.CTAddedResponse")
	proto.RegisterType((*DeleteCTRequest)(nil), "bigdata.DeleteCTRequest")
	proto.RegisterType((*CTDeletedResponse)(nil), "bigdata.CTDeletedResponse")
	proto.RegisterType((*GetCTSubdomainsRequest)(nil), "bigdata.GetCTSubdomainsRequest")
	proto.RegisterType((*GetCTSubdomainsResponse)(nil), "bigdata.GetCTSubdomainsResponse")
	proto.RegisterMapType((map[string]*prototypes.CTSubdomain)(nil), "bigdata.GetCTSubdomainsResponse.RecordsEntry")
	proto.RegisterType((*AddCTSubdomainsRequest)(nil), "bigdata.AddCTSubdomainsRequest")
	proto.RegisterMapType((map[string]*prototypes.CTSubdomain)(nil), "bigdata.AddCTSubdomainsRequest.RecordsEntry")
	proto.RegisterType((*CTSubdomainsAddedResponse)(nil), "bigdata.CTSubdomainsAddedResponse")
	proto.RegisterType((*DeleteCTSubdomainsRequest)(nil), "bigdata.DeleteCTSubdomainsRequest")
	proto.RegisterType((*CTSubdomainsDeletedResponse)(nil), "bigdata.CTSubdomainsDeletedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BigDataClient is the client API for BigData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BigDataClient interface {
	GetCT(ctx context.Context, in *GetCTRequest, opts ...grpc.CallOption) (*GetCTResponse, error)
	AddCT(ctx context.Context, in *AddCTRequest, opts ...grpc.CallOption) (*CTAddedResponse, error)
	DeleteCT(ctx context.Context, in *DeleteCTRequest, opts ...grpc.CallOption) (*CTDeletedResponse, error)
	GetCTSubdomains(ctx context.Context, in *GetCTSubdomainsRequest, opts ...grpc.CallOption) (*GetCTSubdomainsResponse, error)
	AddCTSubdomains(ctx context.Context, in *AddCTSubdomainsRequest, opts ...grpc.CallOption) (*CTSubdomainsAddedResponse, error)
	DeleteCTSubdomains(ctx context.Context, in *DeleteCTSubdomainsRequest, opts ...grpc.CallOption) (*CTSubdomainsDeletedResponse, error)
}

type bigDataClient struct {
	cc *grpc.ClientConn
}

func NewBigDataClient(cc *grpc.ClientConn) BigDataClient {
	return &bigDataClient{cc}
}

func (c *bigDataClient) GetCT(ctx context.Context, in *GetCTRequest, opts ...grpc.CallOption) (*GetCTResponse, error) {
	out := new(GetCTResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/GetCT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigDataClient) AddCT(ctx context.Context, in *AddCTRequest, opts ...grpc.CallOption) (*CTAddedResponse, error) {
	out := new(CTAddedResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/AddCT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigDataClient) DeleteCT(ctx context.Context, in *DeleteCTRequest, opts ...grpc.CallOption) (*CTDeletedResponse, error) {
	out := new(CTDeletedResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/DeleteCT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigDataClient) GetCTSubdomains(ctx context.Context, in *GetCTSubdomainsRequest, opts ...grpc.CallOption) (*GetCTSubdomainsResponse, error) {
	out := new(GetCTSubdomainsResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/GetCTSubdomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigDataClient) AddCTSubdomains(ctx context.Context, in *AddCTSubdomainsRequest, opts ...grpc.CallOption) (*CTSubdomainsAddedResponse, error) {
	out := new(CTSubdomainsAddedResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/AddCTSubdomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigDataClient) DeleteCTSubdomains(ctx context.Context, in *DeleteCTSubdomainsRequest, opts ...grpc.CallOption) (*CTSubdomainsDeletedResponse, error) {
	out := new(CTSubdomainsDeletedResponse)
	err := c.cc.Invoke(ctx, "/bigdata.BigData/DeleteCTSubdomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BigDataServer is the server API for BigData service.
type BigDataServer interface {
	GetCT(context.Context, *GetCTRequest) (*GetCTResponse, error)
	AddCT(context.Context, *AddCTRequest) (*CTAddedResponse, error)
	DeleteCT(context.Context, *DeleteCTRequest) (*CTDeletedResponse, error)
	GetCTSubdomains(context.Context, *GetCTSubdomainsRequest) (*GetCTSubdomainsResponse, error)
	AddCTSubdomains(context.Context, *AddCTSubdomainsRequest) (*CTSubdomainsAddedResponse, error)
	DeleteCTSubdomains(context.Context, *DeleteCTSubdomainsRequest) (*CTSubdomainsDeletedResponse, error)
}

func RegisterBigDataServer(s *grpc.Server, srv BigDataServer) {
	s.RegisterService(&_BigData_serviceDesc, srv)
}

func _BigData_GetCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).GetCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/GetCT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).GetCT(ctx, req.(*GetCTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigData_AddCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).AddCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/AddCT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).AddCT(ctx, req.(*AddCTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigData_DeleteCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).DeleteCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/DeleteCT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).DeleteCT(ctx, req.(*DeleteCTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigData_GetCTSubdomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCTSubdomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).GetCTSubdomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/GetCTSubdomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).GetCTSubdomains(ctx, req.(*GetCTSubdomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigData_AddCTSubdomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCTSubdomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).AddCTSubdomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/AddCTSubdomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).AddCTSubdomains(ctx, req.(*AddCTSubdomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigData_DeleteCTSubdomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCTSubdomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigDataServer).DeleteCTSubdomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigdata.BigData/DeleteCTSubdomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigDataServer).DeleteCTSubdomains(ctx, req.(*DeleteCTSubdomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BigData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bigdata.BigData",
	HandlerType: (*BigDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCT",
			Handler:    _BigData_GetCT_Handler,
		},
		{
			MethodName: "AddCT",
			Handler:    _BigData_AddCT_Handler,
		},
		{
			MethodName: "DeleteCT",
			Handler:    _BigData_DeleteCT_Handler,
		},
		{
			MethodName: "GetCTSubdomains",
			Handler:    _BigData_GetCTSubdomains_Handler,
		},
		{
			MethodName: "AddCTSubdomains",
			Handler:    _BigData_AddCTSubdomains_Handler,
		},
		{
			MethodName: "DeleteCTSubdomains",
			Handler:    _BigData_DeleteCTSubdomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bigdata/bigdataservicer.proto",
}

func (m *GetCTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.Time))
	}
	if len(m.Records) > 0 {
		for k, _ := range m.Records {
			dAtA[i] = 0x12
			i++
			v := m.Records[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBigdataservicer(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + msgSize
			i = encodeVarintBigdataservicer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBigdataservicer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBigdataservicer(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCTRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n3, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.QueryTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.QueryTime))
	}
	if len(m.Records) > 0 {
		for k, _ := range m.Records {
			dAtA[i] = 0x22
			i++
			v := m.Records[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBigdataservicer(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + msgSize
			i = encodeVarintBigdataservicer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBigdataservicer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBigdataservicer(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CTAddedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTAddedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCTRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n5, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CTDeletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTDeletedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCTSubdomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTSubdomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n6, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCTSubdomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTSubdomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.Time))
	}
	if len(m.Records) > 0 {
		for k, _ := range m.Records {
			dAtA[i] = 0x12
			i++
			v := m.Records[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBigdataservicer(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + msgSize
			i = encodeVarintBigdataservicer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBigdataservicer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBigdataservicer(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCTSubdomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCTSubdomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n8, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.QueryTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.QueryTime))
	}
	if len(m.Records) > 0 {
		for k, _ := range m.Records {
			dAtA[i] = 0x22
			i++
			v := m.Records[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBigdataservicer(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + msgSize
			i = encodeVarintBigdataservicer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBigdataservicer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBigdataservicer(dAtA, i, uint64(v.Size()))
				n9, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n9
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CTSubdomainsAddedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTSubdomainsAddedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCTSubdomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCTSubdomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n10, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigdataservicer(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CTSubdomainsDeletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTSubdomainsDeletedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBigdataservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetCTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovBigdataservicer(uint64(m.Time))
	}
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBigdataservicer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBigdataservicer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.QueryTime != 0 {
		n += 1 + sovBigdataservicer(uint64(m.QueryTime))
	}
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBigdataservicer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBigdataservicer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CTAddedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CTDeletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCTSubdomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCTSubdomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovBigdataservicer(uint64(m.Time))
	}
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBigdataservicer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBigdataservicer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCTSubdomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.QueryTime != 0 {
		n += 1 + sovBigdataservicer(uint64(m.QueryTime))
	}
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBigdataservicer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBigdataservicer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBigdataservicer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CTSubdomainsAddedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCTSubdomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovBigdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CTSubdomainsDeletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBigdataservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBigdataservicer(x uint64) (n int) {
	return sovBigdataservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[string]*prototypes.CTRecord)
			}
			var mapkey string
			var mapvalue *prototypes.CTRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigdataservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &prototypes.CTRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigdataservicer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTime", wireType)
			}
			m.QueryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[string]*prototypes.CTRecord)
			}
			var mapkey string
			var mapvalue *prototypes.CTRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigdataservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &prototypes.CTRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigdataservicer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTAddedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTAddedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTAddedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTDeletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTDeletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTDeletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCTSubdomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTSubdomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTSubdomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCTSubdomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTSubdomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTSubdomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[string]*prototypes.CTSubdomain)
			}
			var mapkey string
			var mapvalue *prototypes.CTSubdomain
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigdataservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &prototypes.CTSubdomain{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigdataservicer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCTSubdomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCTSubdomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCTSubdomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTime", wireType)
			}
			m.QueryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[string]*prototypes.CTSubdomain)
			}
			var mapkey string
			var mapvalue *prototypes.CTSubdomain
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigdataservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigdataservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &prototypes.CTSubdomain{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigdataservicer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigdataservicer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTSubdomainsAddedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTSubdomainsAddedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTSubdomainsAddedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCTSubdomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCTSubdomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCTSubdomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CTSubdomainsDeletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTSubdomainsDeletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTSubdomainsDeletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBigdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBigdataservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBigdataservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigdataservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBigdataservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBigdataservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBigdataservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBigdataservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBigdataservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("bigdata/bigdataservicer.proto", fileDescriptor_bigdataservicer_ea8b46e5ebe47f57)
}

var fileDescriptor_bigdataservicer_ea8b46e5ebe47f57 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x8e, 0x12, 0x4d,
	0x10, 0xfe, 0x07, 0x96, 0x1f, 0x29, 0x30, 0xb8, 0x65, 0x16, 0x61, 0xd6, 0x65, 0xc9, 0xe8, 0x81,
	0x83, 0xdb, 0x24, 0x98, 0x98, 0x8d, 0xd1, 0x64, 0x77, 0x01, 0xd7, 0x83, 0x17, 0xc7, 0x59, 0x0f,
	0xc6, 0x68, 0x06, 0xa6, 0x83, 0x93, 0x05, 0x06, 0xa7, 0x7b, 0x36, 0xf2, 0x0e, 0x3e, 0x80, 0xaf,
	0xe0, 0x5b, 0x78, 0x34, 0xf1, 0xe2, 0x23, 0x18, 0x7c, 0x06, 0xef, 0x86, 0x1e, 0x66, 0xe9, 0xe9,
	0x01, 0xb9, 0xc0, 0x69, 0x7a, 0xaa, 0xbb, 0xbe, 0xaa, 0xaf, 0xea, 0xab, 0x6e, 0x38, 0xe8, 0xba,
	0x7d, 0xc7, 0xe6, 0x76, 0x63, 0xfe, 0x65, 0xd4, 0xbf, 0x72, 0x7b, 0xd4, 0x27, 0x63, 0xdf, 0xe3,
	0x1e, 0x66, 0xe7, 0x66, 0x7d, 0x4f, 0xfc, 0xf3, 0xc9, 0x98, 0xb2, 0x46, 0xc0, 0xa2, 0x7d, 0xbd,
	0x22, 0x99, 0x7b, 0xdc, 0xa7, 0x3d, 0xcf, 0x77, 0xc2, 0x2d, 0xc3, 0x84, 0xc2, 0x39, 0xe5, 0x2d,
	0xcb, 0xa4, 0x1f, 0x03, 0xca, 0x38, 0x12, 0xc8, 0x5f, 0x30, 0xea, 0xb7, 0xbc, 0x11, 0xa7, 0x9f,
	0x78, 0x59, 0xab, 0x69, 0xf5, 0x7c, 0xb3, 0x40, 0x24, 0x9b, 0x29, 0x1f, 0x40, 0x84, 0x9d, 0x8e,
	0xf5, 0xa2, 0x5d, 0x4e, 0xd5, 0xb4, 0x7a, 0xce, 0x14, 0x6b, 0xe3, 0xab, 0x06, 0x37, 0xe7, 0xa0,
	0x6c, 0xec, 0x8d, 0x18, 0x9d, 0x9d, 0xb2, 0xdc, 0x21, 0x15, 0x70, 0x69, 0x53, 0xac, 0xf1, 0x29,
	0x64, 0xc3, 0x4c, 0x58, 0x39, 0x55, 0x4b, 0xd7, 0xf3, 0xcd, 0x7b, 0x64, 0x4e, 0x83, 0xc4, 0x9c,
	0x89, 0x19, 0x9e, 0xea, 0x8c, 0xb8, 0x3f, 0x31, 0x23, 0x1f, 0xbd, 0x03, 0x05, 0x79, 0x03, 0x6f,
	0x41, 0xfa, 0x92, 0x4e, 0x44, 0x84, 0x9c, 0x39, 0x5b, 0xe2, 0x21, 0x64, 0xae, 0xec, 0x41, 0x40,
	0x45, 0x6e, 0xf9, 0x66, 0x8e, 0xcc, 0x30, 0x67, 0x1e, 0x66, 0x68, 0x7f, 0x9c, 0x3a, 0xd6, 0x8c,
	0x3f, 0x1a, 0x14, 0x4e, 0x1d, 0x67, 0xa3, 0x05, 0xc0, 0xbb, 0x90, 0x7b, 0x19, 0x50, 0x7f, 0x22,
	0x38, 0xa7, 0x05, 0xe7, 0x85, 0x01, 0x9f, 0x2c, 0x88, 0xef, 0x08, 0xe2, 0xc6, 0x35, 0x71, 0x39,
	0x93, 0xed, 0xf2, 0xde, 0x85, 0x62, 0xcb, 0x3a, 0x75, 0x1c, 0xea, 0x44, 0x75, 0x36, 0x2e, 0xa0,
	0xd8, 0xa6, 0x03, 0xca, 0xe9, 0x66, 0xd5, 0x70, 0x1b, 0x76, 0x5b, 0x56, 0x08, 0xbc, 0x88, 0xf5,
	0x16, 0x4a, 0xa2, 0xc9, 0xaf, 0x82, 0xae, 0xe3, 0x0d, 0x6d, 0x77, 0xc4, 0x36, 0x19, 0xf2, 0x9b,
	0x06, 0x77, 0x12, 0xf0, 0xff, 0x90, 0xe2, 0xb9, 0x2a, 0xc5, 0xa3, 0xb8, 0x14, 0x93, 0x30, 0x2b,
	0x9a, 0xf3, 0x7c, 0x6d, 0x73, 0x8c, 0x78, 0x73, 0x0a, 0x44, 0x42, 0x97, 0xfb, 0xf3, 0x39, 0x05,
	0x25, 0xa1, 0x86, 0xad, 0x54, 0x68, 0x8d, 0x42, 0x9f, 0xa9, 0x0a, 0x7d, 0x10, 0x57, 0x68, 0x22,
	0xa7, 0xad, 0x97, 0x63, 0x1f, 0x2a, 0x72, 0xd8, 0xb8, 0x70, 0xdf, 0x43, 0x25, 0x12, 0xee, 0x76,
	0xf4, 0x74, 0x00, 0xfb, 0x32, 0xb4, 0x22, 0xe6, 0xe6, 0x8f, 0x34, 0x64, 0xcf, 0xdc, 0x7e, 0xdb,
	0xe6, 0x36, 0x3e, 0x82, 0x8c, 0x90, 0x0c, 0xee, 0xa9, 0xb7, 0x99, 0x48, 0x47, 0x2f, 0x2d, 0xbf,
	0xe4, 0xf0, 0x18, 0x32, 0xa2, 0xb4, 0x92, 0x9f, 0x7c, 0x19, 0xe8, 0xe5, 0x6b, 0xb3, 0x32, 0xb6,
	0x78, 0x02, 0x37, 0x22, 0xf6, 0xb8, 0x38, 0xa5, 0x4c, 0xb2, 0xae, 0x4b, 0xfe, 0x4a, 0xfe, 0x68,
	0x41, 0x51, 0x91, 0x39, 0x1e, 0xae, 0x1e, 0x80, 0x10, 0xaf, 0xb6, 0x6e, 0x42, 0xf0, 0x35, 0x14,
	0x15, 0xb1, 0x48, 0xa8, 0xcb, 0x65, 0xa4, 0x1b, 0x52, 0x96, 0x2b, 0xba, 0x8d, 0xef, 0x00, 0x93,
	0xdd, 0x46, 0x23, 0xc1, 0x3c, 0x89, 0x7e, 0x7f, 0x29, 0xba, 0x52, 0x8d, 0xb3, 0x93, 0xef, 0xd3,
	0xaa, 0xf6, 0x73, 0x5a, 0xd5, 0x7e, 0x4d, 0xab, 0xda, 0x97, 0xdf, 0xd5, 0xff, 0xde, 0x90, 0xbe,
	0xcb, 0x3f, 0x04, 0x5d, 0xd2, 0xf3, 0x86, 0x8d, 0x81, 0x3b, 0xba, 0xb4, 0xdd, 0x23, 0xd7, 0x6b,
	0xd8, 0xc3, 0x86, 0x78, 0x42, 0x7b, 0xf3, 0xc7, 0x98, 0x45, 0x8f, 0x73, 0xf7, 0x7f, 0x61, 0x7f,
	0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xd4, 0x5b, 0xa0, 0xb6, 0x07, 0x00, 0x00,
}
